name: 'FTP/SFTP file deployer'

description: 'Fast and customizable deployment with proxy support. Deploy only changed files or do full sync/mirror of repository content.'

branding:
  icon: "upload"  
  color: "black"

inputs:
  remote-protocol:
    description: "Remote file transfer protocol (ftp, sftp)"
    required: true
    default: "sftp"
  remote-host:
    description: "Remote host"
    required: true
  remote-port:
    description: "Remote port"
    required: true
    default: 22
  remote-user:
    description: "FTP/SSH username"
    required: true
  remote-password:
    description: "FTP/SSH password"
    required: false
    default: ""
  ssh-private-key:
    description: "SSH private key of user"
    required: false
  proxy:
    description: "Enable proxy for FTP connection (true, false)"
    required: true
    default: false
  proxy-host:
    description: "Proxy host"
    required: false
  proxy-port:
    description: "Proxy port"
    required: false
    default: 22
  proxy-forwarding-port:
    description: "Proxy forwarding port"
    required: false
    default: 1080
  proxy-user:
    description: "Proxy username"
    required: false
  proxy-private-key:
    description: "Proxy SSH private key of user"
    required: false
  local-path:
    description: "Local path to repository"
    required: true
    default: .
  remote-path:
    description: "Remote path on host"
    required: true
    default: .
  sync:
    description: "File synchronization (delta, full)"
    required: true
    default: "delta"
  ssh-options:
    description: "Additional command arguments for SSH client"
    required: false
  ftp-options:
    description: "Additional command arguments for FTP client (lftp)"
    required: false
  ftp-mirror-options:
    description: "Additional command arguments for mirroring (lftp)"
    required: false
  debug:
    description: "Enable debug information (true, false)"
    required: false
    default: false

runs:
  using: "composite"
  steps:
    - run: |
        echo "::group::Initialization"

        echo "Check repository"
        if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" != "true" ]; then
          echo "::error::Git repository not found. Please ensure you have a checkout action step before this step."
          exit 1
        fi

        printf '%.s_' {1..50} > ~/hr && echo "" >> ~/hr

        echo "Initialize inputs"

        remote_path_unslash=$(realpath --canonicalize-missing ${{ inputs.remote-path }})
        remote_path_slash="${remote_path_unslash}/"
        echo "remote_path_unslash=${remote_path_unslash}" >> "${GITHUB_ENV}"
        echo "remote_path_slash=${remote_path_slash}" >> "${GITHUB_ENV}"

        if [ "${{ inputs.remote-password }}" != "" ]; then
          echo "input_remote_password=${{ inputs.remote-password }}" >> "${GITHUB_ENV}"
        else
          echo "input_remote_password=dummypassword" >> "${GITHUB_ENV}"
        fi

        echo "input_proxy=${{ inputs.proxy }}" >> "${GITHUB_ENV}"

        if [ "${{ inputs.proxy }}" == "true" ]; then
          echo "proxy_cmd=proxychains" >> "${GITHUB_ENV}"
        else
          echo "proxy_cmd=" >> "${GITHUB_ENV}"
        fi

        input_sync=${{ inputs.sync }}
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          input_sync=${{ github.event.inputs.sync }}
        fi
        echo "input_sync=${input_sync}" >> "${GITHUB_ENV}"

        echo "Validate inputs"

        if [ "${{ inputs.remote-protocol }}" != "sftp" ] && [ "${{ inputs.remote-protocol }}" != "ftp" ]; then
          echo "::error::Invalid protocol: ${{ inputs.remote-protocol }}. Supported protocols are 'ftp' and 'sftp'."
          exit 1
        fi

        if [ "${input_sync}" != "delta" ] && [ "${input_sync}" != "full" ]; then
          echo "::error::Invalid synchronization: ${input_sync}. Supported types are 'delta' and 'full'."
          exit 1
        fi

        echo "::endgroup::"

        exit 0
      shell: bash
    - run: |
        if [ "${{ inputs.debug }}" == "true" ]; then
          echo "::group::Debug"

          echo "Context: github" && echo "${{ toJSON(github) }}" && cat ~/hr
          
          echo "Context: env" && echo "${{ toJSON(env) }}" && cat ~/hr
          
          echo "Inputs:" && echo "${{ toJSON(inputs) }}"

          echo "::endgroup::"
        fi

        exit 0
      shell: bash
    - run: |
        echo "::group::Install packages"

        apt_install=""
        apt_quiet="--quiet --quiet"
        if [ "${{ inputs.debug }}" == "true" ]; then
          apt_quiet=""
        fi
        if [ "${{ env.input_proxy }}" == "true" ]; then
          apt_install="${{ env.proxy_cmd }}"
        fi
        sudo apt-get ${apt_quiet} update && sudo apt-get ${apt_quiet} --no-install-recommends --yes install lftp ${apt_install}

        echo "::endgroup::"

        exit 0
      shell: bash
    - run: |
        echo "::group::Configurations"

        config_ssh=~/.ssh/config
        mkdir ~/.ssh && echo -e "ExitOnForwardFailure=yes\nStrictHostKeyChecking=no" > ${config_ssh} && chmod 600 ${config_ssh} && echo "File created: ${config_ssh}"
        [ "${{ inputs.debug }}" == "true" ] && cat ${config_ssh}
        cat ~/hr

        netrc=~/.netrc
        echo "machine ${{ inputs.remote-host }} login ${{ inputs.remote-user }} password ${{ env.input_remote_password }}" > ${netrc} && chmod 600 ${netrc} && echo "File created: ${netrc}"
        [ "${{ inputs.debug }}" == "true" ] && cat ${netrc}
        cat ~/hr

        if [ "${{ inputs.remote-protocol }}" == "sftp" ] && [ "${{ inputs.ssh-private-key }}" != "" ]; then
          key_ssh=~/ssh_private_key_file
          echo "${{ inputs.ssh-private-key }}" > ${key_ssh} && chmod 600 ${key_ssh} && echo "File created: ${key_ssh}" && cat ~/hr
        fi

        if [ "${{ env.input_proxy }}" == "true" ]; then
          if [ "${{ inputs.proxy-private-key }}" != "" ]; then
            key_proxy=~/proxy_private_key_file
            echo "${{ inputs.proxy-private-key }}" > ${key_proxy} && chmod 600 ${key_proxy} && echo "File created: ${key_proxy}" && cat ~/hr

            config_proxychains=~/.proxychains/proxychains.conf
            mkdir ~/.proxychains && echo "strict_chain
            quiet_mode
            tcp_read_time_out 15000
            tcp_connect_time_out 10000
            [ProxyList]
            socks5 127.0.0.1 ${{ inputs.proxy-forwarding-port }}" > ${config_proxychains} && echo "File created: ${config_proxychains}"
            [ "${{ inputs.debug }}" == "true" ] && cat ${config_proxychains}
            cat ~/hr
          else
            echo "input_proxy=false" >> "${GITHUB_ENV}"
            echo "::warning::Invalid input 'proxy-private-key'. Skipping proxy connection."
          fi
        fi

        echo "debug $([ "${{ inputs.debug }}" == "true" ] && echo "9" || echo "false")
        set ftp:ssl-protect-data true
        set ftp:sync-mode false
        set log:enabled/xfer true
        set log:file/xfer ~/.transfer_log
        set log:show-time/xfer false
        set mirror:overwrite true
        set mirror:parallel-transfer-count 5
        set mirror:set-permissions false
        set net:max-retries 1
        set net:persist-retries 0
        set net:timeout 10
        set sftp:auto-confirm true
        set ssl:check-hostname false
        set ssl:verify-certificate false
        ${{ inputs.ftp-options }}" > ~/.lftprc
        if [ "${{ inputs.remote-protocol }}" == "sftp" ] && [ "${{ inputs.ssh-private-key }}" != "" ]; then
          echo "set sftp:connect-program /usr/bin/ssh -a -x -i ~/ssh_private_key_file ${{ inputs.ssh-options }}" >> ~/.lftprc
        else
          echo "set sftp:connect-program /usr/bin/ssh -a -x ${{ inputs.ssh-options }}" >> ~/.lftprc
        fi
        echo "open ${{ inputs.remote-protocol }}://${{ inputs.remote-user }}@${{ inputs.remote-host }}:${{ inputs.remote-port }}" >> ~/.lftprc
        echo "File created: ~/.lftprc"
        [ "${{ inputs.debug }}" == "true" ] && cat ~/.lftprc

        echo "::endgroup::"

        exit 0
      shell: bash
    - run: |
        if [ "${{ env.input_proxy }}" == "true" ]; then
          echo "::group::Setup proxy"

          if [ "${{ inputs.proxy-user }}" != "" ] && [ "${{ inputs.proxy-host }}" != "" ]; then
            ssh -A -D "${{ inputs.proxy-forwarding-port }}" -f -N -p "${{ inputs.proxy-port }}" -i ~/proxy_private_key_file "${{ inputs.proxy-user }}"@"${{ inputs.proxy-host }}" && echo "Proxy connected" && cat ~/hr

            echo "Proxy IP address: $(${{ env.proxy_cmd }} curl --max-time 10 --show-error --silent "http://checkip.amazonaws.com/")"
          else
            echo "input_proxy=false" >> "${GITHUB_ENV}"
            echo "::warning::Invalid input 'proxy-user', 'proxy-host'. Skipping proxy connection."
          fi

          echo "::endgroup::"
        fi

        exit 0
      shell: bash
    - run: |
        if [ "${{ env.input_sync }}" == "delta" ]; then
          echo "::group::Prepare files"

          touch ~/files-upload ~/files-delete
          echo "${{ github.sha }}" > .deploy-revision
          git_depth=$(git rev-list --count --all)
          git_previous_commit=""

          if [ "${git_depth}" -gt 1 ]; then
            if [ "${{ github.event_name }}" == "push" ]; then
              git_previous_commit=${{ github.event.before }}
            elif [ "${{ github.event_name }}" == "pull_request" ]; then
              git_previous_commit=${{ github.event.pull_request.base.sha }}
            elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
              git_previous_commit=$(git rev-parse ${{ github.sha }}^)
            else
              echo "::error::Event not supported for delta synchronization: ${{ github.event_name }}. Supported events are 'push', 'pull_request' and 'workflow_dispatch'."
              exit 1
            fi
          else
            echo "::error::Commit history not found for delta synchronization. Please ensure you have 'fetch-depth: 0' in checkout action."
            exit 1
          fi

          echo -e "Event: ${{ github.event_name }}\nRevision: https://github.com/${{ github.repository }}/commit/${{ github.sha }}\nCommitter: ${{ github.actor }}\nMessage: ${{ github.event.head_commit.message }}\nPrevious Revision: https://github.com/${{ github.repository }}/commit/${git_previous_commit}" && cat ~/hr

          # ${{ env.proxy_cmd }} lftp -c "set log:enabled/xfer false; get -O ~ \"${{ env.remote_path_slash }}.deploy-revision\"; exit 0"
          # echo -n "Remote Revision: " && [ -f ~/.deploy-revision ] && cat ~/.deploy-revision || echo ""
          # cat ~/hr

          git diff --name-only --diff-filter=ACMRT ${git_previous_commit}..${{ github.sha }} | grep --ignore-case --invert-match "^\.git.*" > ~/files-upload && echo "File created: ~/files-upload" && cat ~/files-upload && cat ~/hr
          git diff --name-only --diff-filter=D ${git_previous_commit}..${{ github.sha }} | grep --ignore-case --invert-match "^\.git.*" > ~/files-delete && echo "File created: ~/files-delete" && cat ~/files-delete && cat ~/hr

          echo "::endgroup::"
        fi

        exit 0
      shell: bash
    - run: |
        echo "::group::Transfer files"

        echo "Protocol: ${{ inputs.remote-protocol }}
        Synchronization: ${{ env.input_sync }}
        Local path: ${{ inputs.local-path }}
        Remote path: ${{ env.remote_path_unslash }}"

        if [ "${{ env.input_sync }}" == "delta" ]; then
          files_upload=$(wc --lines < ~/files-upload)
          files_delete=$(wc --lines < ~/files-delete)
          files_total=$((files_upload + files_delete))
          [ "${files_total}" -ge 10 ] && echo "set xfer:parallel 5" >> ~/.lftprc

          echo -e "Upload files: ${files_upload}\nDelete files: ${files_delete}"
        fi

        cat ~/hr

        touch .deploy-running

        if [ "${{ env.input_sync }}" == "full" ]; then
          ${{ env.proxy_cmd }} lftp -c "put -O \"${{ env.remote_path_unslash }}\" .deploy-running
            mirror --exclude-glob=.git*/ --max-errors=10 --reverse ${{ inputs.ftp-mirror-options }} ${{ inputs.local-path }} ${{ env.remote_path_unslash }}
            rm -f \"${{ env.remote_path_slash }}.deploy-running\""
        else
          ${{ env.proxy_cmd }} lftp -c "put -O \"${{ env.remote_path_unslash }}\" .deploy-running
            mput -c -d -O \"${{ env.remote_path_unslash }}\" .deploy-revision $(awk 'ORS=" " { print "\"" $0 "\"" }' ~/files-upload)
            rm -f \"${{ env.remote_path_slash }}.deploy-check\" $(awk 'ORS=" " { print "\"${{ env.remote_path_slash }}" $0 "\"" }' ~/files-delete)
            rm -f \"${{ env.remote_path_slash }}.deploy-running\""
        fi

        [ -f ~/.transfer_log ] && cat ~/.transfer_log

        echo "::endgroup::"

        exit 0
      shell: bash
    - run: |
        echo "::group::Cleanup"

        if [ "${{ env.input_proxy }}" == "true" ]; then
          sudo pkill ssh
        fi

        rm --force --verbose ~/.netrc ~/proxy_private_key_file ~/ssh_private_key_file

        echo "::endgroup::"

        exit 0
      shell: bash
